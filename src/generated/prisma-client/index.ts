// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  channel: (where?: ChannelWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  metaData: (where?: MetaDataWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  channel: (where: ChannelWhereUniqueInput) => ChannelNullablePromise;
  channels: (args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Channel>;
  channelsConnection: (args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChannelConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  metaData: (where: MetaDataWhereUniqueInput) => MetaDataNullablePromise;
  metaDatas: (args?: {
    where?: MetaDataWhereInput;
    orderBy?: MetaDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<MetaData>;
  metaDatasConnection: (args?: {
    where?: MetaDataWhereInput;
    orderBy?: MetaDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MetaDataConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChannel: (data: ChannelCreateInput) => ChannelPromise;
  updateChannel: (args: {
    data: ChannelUpdateInput;
    where: ChannelWhereUniqueInput;
  }) => ChannelPromise;
  updateManyChannels: (args: {
    data: ChannelUpdateManyMutationInput;
    where?: ChannelWhereInput;
  }) => BatchPayloadPromise;
  upsertChannel: (args: {
    where: ChannelWhereUniqueInput;
    create: ChannelCreateInput;
    update: ChannelUpdateInput;
  }) => ChannelPromise;
  deleteChannel: (where: ChannelWhereUniqueInput) => ChannelPromise;
  deleteManyChannels: (where?: ChannelWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createMetaData: (data: MetaDataCreateInput) => MetaDataPromise;
  updateMetaData: (args: {
    data: MetaDataUpdateInput;
    where: MetaDataWhereUniqueInput;
  }) => MetaDataPromise;
  updateManyMetaDatas: (args: {
    data: MetaDataUpdateManyMutationInput;
    where?: MetaDataWhereInput;
  }) => BatchPayloadPromise;
  upsertMetaData: (args: {
    where: MetaDataWhereUniqueInput;
    create: MetaDataCreateInput;
    update: MetaDataUpdateInput;
  }) => MetaDataPromise;
  deleteMetaData: (where: MetaDataWhereUniqueInput) => MetaDataPromise;
  deleteManyMetaDatas: (where?: MetaDataWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  channel: (
    where?: ChannelSubscriptionWhereInput
  ) => ChannelSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  metaData: (
    where?: MetaDataSubscriptionWhereInput
  ) => MetaDataSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "isVerified_ASC"
  | "isVerified_DESC"
  | "passwordResetToken_ASC"
  | "passwordResetToken_DESC"
  | "passwordResetTokenExpires_ASC"
  | "passwordResetTokenExpires_DESC"
  | "emailConfirmationToken_ASC"
  | "emailConfirmationToken_DESC"
  | "emailConfirmationTokenExpires_ASC"
  | "emailConfirmationTokenExpires_DESC";

export type ChannelOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "is_private_ASC"
  | "is_private_DESC"
  | "deleted_ASC"
  | "deleted_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "edited_ASC"
  | "edited_DESC"
  | "deleted_ASC"
  | "deleted_DESC"
  | "text_ASC"
  | "text_DESC";

export type MetaDataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "image_ASC"
  | "image_DESC"
  | "author_ASC"
  | "author_DESC"
  | "description_ASC"
  | "description_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export type ChannelWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChannelUpdateOneRequiredInput {
  create?: Maybe<ChannelCreateInput>;
  update?: Maybe<ChannelUpdateDataInput>;
  upsert?: Maybe<ChannelUpsertNestedInput>;
  connect?: Maybe<ChannelWhereUniqueInput>;
}

export interface ChannelUpdateManyMutationInput {
  name?: Maybe<String>;
  is_private?: Maybe<Boolean>;
  deleted?: Maybe<Boolean>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  passwordResetToken?: Maybe<String>;
  emailConfirmationToken?: Maybe<String>;
}>;

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  isVerified?: Maybe<Boolean>;
  isVerified_not?: Maybe<Boolean>;
  passwordResetToken?: Maybe<String>;
  passwordResetToken_not?: Maybe<String>;
  passwordResetToken_in?: Maybe<String[] | String>;
  passwordResetToken_not_in?: Maybe<String[] | String>;
  passwordResetToken_lt?: Maybe<String>;
  passwordResetToken_lte?: Maybe<String>;
  passwordResetToken_gt?: Maybe<String>;
  passwordResetToken_gte?: Maybe<String>;
  passwordResetToken_contains?: Maybe<String>;
  passwordResetToken_not_contains?: Maybe<String>;
  passwordResetToken_starts_with?: Maybe<String>;
  passwordResetToken_not_starts_with?: Maybe<String>;
  passwordResetToken_ends_with?: Maybe<String>;
  passwordResetToken_not_ends_with?: Maybe<String>;
  passwordResetTokenExpires?: Maybe<DateTimeInput>;
  passwordResetTokenExpires_not?: Maybe<DateTimeInput>;
  passwordResetTokenExpires_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  passwordResetTokenExpires_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  passwordResetTokenExpires_lt?: Maybe<DateTimeInput>;
  passwordResetTokenExpires_lte?: Maybe<DateTimeInput>;
  passwordResetTokenExpires_gt?: Maybe<DateTimeInput>;
  passwordResetTokenExpires_gte?: Maybe<DateTimeInput>;
  emailConfirmationToken?: Maybe<String>;
  emailConfirmationToken_not?: Maybe<String>;
  emailConfirmationToken_in?: Maybe<String[] | String>;
  emailConfirmationToken_not_in?: Maybe<String[] | String>;
  emailConfirmationToken_lt?: Maybe<String>;
  emailConfirmationToken_lte?: Maybe<String>;
  emailConfirmationToken_gt?: Maybe<String>;
  emailConfirmationToken_gte?: Maybe<String>;
  emailConfirmationToken_contains?: Maybe<String>;
  emailConfirmationToken_not_contains?: Maybe<String>;
  emailConfirmationToken_starts_with?: Maybe<String>;
  emailConfirmationToken_not_starts_with?: Maybe<String>;
  emailConfirmationToken_ends_with?: Maybe<String>;
  emailConfirmationToken_not_ends_with?: Maybe<String>;
  emailConfirmationTokenExpires?: Maybe<DateTimeInput>;
  emailConfirmationTokenExpires_not?: Maybe<DateTimeInput>;
  emailConfirmationTokenExpires_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  emailConfirmationTokenExpires_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  emailConfirmationTokenExpires_lt?: Maybe<DateTimeInput>;
  emailConfirmationTokenExpires_lte?: Maybe<DateTimeInput>;
  emailConfirmationTokenExpires_gt?: Maybe<DateTimeInput>;
  emailConfirmationTokenExpires_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface MessageUpdateInput {
  sender?: Maybe<UserUpdateOneRequiredInput>;
  receiver?: Maybe<ChannelUpdateOneRequiredInput>;
  edited?: Maybe<Boolean>;
  deleted?: Maybe<Boolean>;
  text?: Maybe<String>;
  metaData?: Maybe<MetaDataUpdateOneInput>;
}

export interface ChannelWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  members_every?: Maybe<UserWhereInput>;
  members_some?: Maybe<UserWhereInput>;
  members_none?: Maybe<UserWhereInput>;
  owner?: Maybe<UserWhereInput>;
  is_private?: Maybe<Boolean>;
  is_private_not?: Maybe<Boolean>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  AND?: Maybe<ChannelWhereInput[] | ChannelWhereInput>;
  OR?: Maybe<ChannelWhereInput[] | ChannelWhereInput>;
  NOT?: Maybe<ChannelWhereInput[] | ChannelWhereInput>;
}

export interface MetaDataCreateInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  image?: Maybe<String>;
  author?: Maybe<String>;
  description?: Maybe<String>;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface MetaDataCreateOneInput {
  create?: Maybe<MetaDataCreateInput>;
  connect?: Maybe<MetaDataWhereUniqueInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  isVerified?: Maybe<Boolean>;
  passwordResetToken?: Maybe<String>;
  passwordResetTokenExpires?: Maybe<DateTimeInput>;
  emailConfirmationToken?: Maybe<String>;
  emailConfirmationTokenExpires?: Maybe<DateTimeInput>;
}

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MetaDataUpdateInput {
  title?: Maybe<String>;
  image?: Maybe<String>;
  author?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ChannelCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  members?: Maybe<UserCreateManyInput>;
  owner: UserCreateOneInput;
  is_private?: Maybe<Boolean>;
  deleted?: Maybe<Boolean>;
}

export interface MetaDataWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<MetaDataWhereInput[] | MetaDataWhereInput>;
  OR?: Maybe<MetaDataWhereInput[] | MetaDataWhereInput>;
  NOT?: Maybe<MetaDataWhereInput[] | MetaDataWhereInput>;
}

export interface UserCreateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface MessageUpdateManyMutationInput {
  edited?: Maybe<Boolean>;
  deleted?: Maybe<Boolean>;
  text?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  name: String;
  isVerified?: Maybe<Boolean>;
  passwordResetToken?: Maybe<String>;
  passwordResetTokenExpires?: Maybe<DateTimeInput>;
  emailConfirmationToken?: Maybe<String>;
  emailConfirmationTokenExpires?: Maybe<DateTimeInput>;
}

export interface MetaDataUpdateDataInput {
  title?: Maybe<String>;
  image?: Maybe<String>;
  author?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface MetaDataUpdateOneInput {
  create?: Maybe<MetaDataCreateInput>;
  update?: Maybe<MetaDataUpdateDataInput>;
  upsert?: Maybe<MetaDataUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<MetaDataWhereUniqueInput>;
}

export interface ChannelUpdateInput {
  name?: Maybe<String>;
  members?: Maybe<UserUpdateManyInput>;
  owner?: Maybe<UserUpdateOneRequiredInput>;
  is_private?: Maybe<Boolean>;
  deleted?: Maybe<Boolean>;
}

export interface ChannelUpdateDataInput {
  name?: Maybe<String>;
  members?: Maybe<UserUpdateManyInput>;
  owner?: Maybe<UserUpdateOneRequiredInput>;
  is_private?: Maybe<Boolean>;
  deleted?: Maybe<Boolean>;
}

export interface ChannelCreateOneInput {
  create?: Maybe<ChannelCreateInput>;
  connect?: Maybe<ChannelWhereUniqueInput>;
}

export interface MetaDataSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MetaDataWhereInput>;
  AND?: Maybe<
    MetaDataSubscriptionWhereInput[] | MetaDataSubscriptionWhereInput
  >;
  OR?: Maybe<MetaDataSubscriptionWhereInput[] | MetaDataSubscriptionWhereInput>;
  NOT?: Maybe<
    MetaDataSubscriptionWhereInput[] | MetaDataSubscriptionWhereInput
  >;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  isVerified?: Maybe<Boolean>;
  passwordResetToken?: Maybe<String>;
  passwordResetTokenExpires?: Maybe<DateTimeInput>;
  emailConfirmationToken?: Maybe<String>;
  emailConfirmationTokenExpires?: Maybe<DateTimeInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  isVerified?: Maybe<Boolean>;
  passwordResetToken?: Maybe<String>;
  passwordResetTokenExpires?: Maybe<DateTimeInput>;
  emailConfirmationToken?: Maybe<String>;
  emailConfirmationTokenExpires?: Maybe<DateTimeInput>;
}

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  sender?: Maybe<UserWhereInput>;
  receiver?: Maybe<ChannelWhereInput>;
  edited?: Maybe<Boolean>;
  edited_not?: Maybe<Boolean>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  metaData?: Maybe<MetaDataWhereInput>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface MetaDataUpsertNestedInput {
  update: MetaDataUpdateDataInput;
  create: MetaDataCreateInput;
}

export interface MessageCreateInput {
  id?: Maybe<ID_Input>;
  sender: UserCreateOneInput;
  receiver: ChannelCreateOneInput;
  edited?: Maybe<Boolean>;
  deleted?: Maybe<Boolean>;
  text: String;
  metaData?: Maybe<MetaDataCreateOneInput>;
}

export interface ChannelUpsertNestedInput {
  update: ChannelUpdateDataInput;
  create: ChannelCreateInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateManyDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  isVerified?: Maybe<Boolean>;
  passwordResetToken?: Maybe<String>;
  passwordResetTokenExpires?: Maybe<DateTimeInput>;
  emailConfirmationToken?: Maybe<String>;
  emailConfirmationTokenExpires?: Maybe<DateTimeInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export type MetaDataWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  isVerified?: Maybe<Boolean>;
  isVerified_not?: Maybe<Boolean>;
  passwordResetToken?: Maybe<String>;
  passwordResetToken_not?: Maybe<String>;
  passwordResetToken_in?: Maybe<String[] | String>;
  passwordResetToken_not_in?: Maybe<String[] | String>;
  passwordResetToken_lt?: Maybe<String>;
  passwordResetToken_lte?: Maybe<String>;
  passwordResetToken_gt?: Maybe<String>;
  passwordResetToken_gte?: Maybe<String>;
  passwordResetToken_contains?: Maybe<String>;
  passwordResetToken_not_contains?: Maybe<String>;
  passwordResetToken_starts_with?: Maybe<String>;
  passwordResetToken_not_starts_with?: Maybe<String>;
  passwordResetToken_ends_with?: Maybe<String>;
  passwordResetToken_not_ends_with?: Maybe<String>;
  passwordResetTokenExpires?: Maybe<DateTimeInput>;
  passwordResetTokenExpires_not?: Maybe<DateTimeInput>;
  passwordResetTokenExpires_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  passwordResetTokenExpires_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  passwordResetTokenExpires_lt?: Maybe<DateTimeInput>;
  passwordResetTokenExpires_lte?: Maybe<DateTimeInput>;
  passwordResetTokenExpires_gt?: Maybe<DateTimeInput>;
  passwordResetTokenExpires_gte?: Maybe<DateTimeInput>;
  emailConfirmationToken?: Maybe<String>;
  emailConfirmationToken_not?: Maybe<String>;
  emailConfirmationToken_in?: Maybe<String[] | String>;
  emailConfirmationToken_not_in?: Maybe<String[] | String>;
  emailConfirmationToken_lt?: Maybe<String>;
  emailConfirmationToken_lte?: Maybe<String>;
  emailConfirmationToken_gt?: Maybe<String>;
  emailConfirmationToken_gte?: Maybe<String>;
  emailConfirmationToken_contains?: Maybe<String>;
  emailConfirmationToken_not_contains?: Maybe<String>;
  emailConfirmationToken_starts_with?: Maybe<String>;
  emailConfirmationToken_not_starts_with?: Maybe<String>;
  emailConfirmationToken_ends_with?: Maybe<String>;
  emailConfirmationToken_not_ends_with?: Maybe<String>;
  emailConfirmationTokenExpires?: Maybe<DateTimeInput>;
  emailConfirmationTokenExpires_not?: Maybe<DateTimeInput>;
  emailConfirmationTokenExpires_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  emailConfirmationTokenExpires_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  emailConfirmationTokenExpires_lt?: Maybe<DateTimeInput>;
  emailConfirmationTokenExpires_lte?: Maybe<DateTimeInput>;
  emailConfirmationTokenExpires_gt?: Maybe<DateTimeInput>;
  emailConfirmationTokenExpires_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface MetaDataUpdateManyMutationInput {
  title?: Maybe<String>;
  image?: Maybe<String>;
  author?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ChannelSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChannelWhereInput>;
  AND?: Maybe<ChannelSubscriptionWhereInput[] | ChannelSubscriptionWhereInput>;
  OR?: Maybe<ChannelSubscriptionWhereInput[] | ChannelSubscriptionWhereInput>;
  NOT?: Maybe<ChannelSubscriptionWhereInput[] | ChannelSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
  isVerified?: Boolean;
  passwordResetToken?: String;
  passwordResetTokenExpires?: DateTimeOutput;
  emailConfirmationToken?: String;
  emailConfirmationTokenExpires?: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  isVerified: () => Promise<Boolean>;
  passwordResetToken: () => Promise<String>;
  passwordResetTokenExpires: () => Promise<DateTimeOutput>;
  emailConfirmationToken: () => Promise<String>;
  emailConfirmationTokenExpires: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  isVerified: () => Promise<AsyncIterator<Boolean>>;
  passwordResetToken: () => Promise<AsyncIterator<String>>;
  passwordResetTokenExpires: () => Promise<AsyncIterator<DateTimeOutput>>;
  emailConfirmationToken: () => Promise<AsyncIterator<String>>;
  emailConfirmationTokenExpires: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Message {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  edited?: Boolean;
  deleted?: Boolean;
  text: String;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  sender: <T = UserPromise>() => T;
  receiver: <T = ChannelPromise>() => T;
  edited: () => Promise<Boolean>;
  deleted: () => Promise<Boolean>;
  text: () => Promise<String>;
  metaData: <T = MetaDataPromise>() => T;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  sender: <T = UserSubscription>() => T;
  receiver: <T = ChannelSubscription>() => T;
  edited: () => Promise<AsyncIterator<Boolean>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  text: () => Promise<AsyncIterator<String>>;
  metaData: <T = MetaDataSubscription>() => T;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  sender: <T = UserPromise>() => T;
  receiver: <T = ChannelPromise>() => T;
  edited: () => Promise<Boolean>;
  deleted: () => Promise<Boolean>;
  text: () => Promise<String>;
  metaData: <T = MetaDataPromise>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface MetaData {
  id: ID_Output;
  title?: String;
  image?: String;
  author?: String;
  description?: String;
}

export interface MetaDataPromise extends Promise<MetaData>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  image: () => Promise<String>;
  author: () => Promise<String>;
  description: () => Promise<String>;
}

export interface MetaDataSubscription
  extends Promise<AsyncIterator<MetaData>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface MetaDataNullablePromise
  extends Promise<MetaData | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  image: () => Promise<String>;
  author: () => Promise<String>;
  description: () => Promise<String>;
}

export interface MetaDataSubscriptionPayload {
  mutation: MutationType;
  node: MetaData;
  updatedFields: String[];
  previousValues: MetaDataPreviousValues;
}

export interface MetaDataSubscriptionPayloadPromise
  extends Promise<MetaDataSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MetaDataPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MetaDataPreviousValuesPromise>() => T;
}

export interface MetaDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MetaDataSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MetaDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MetaDataPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
  isVerified?: Boolean;
  passwordResetToken?: String;
  passwordResetTokenExpires?: DateTimeOutput;
  emailConfirmationToken?: String;
  emailConfirmationTokenExpires?: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  isVerified: () => Promise<Boolean>;
  passwordResetToken: () => Promise<String>;
  passwordResetTokenExpires: () => Promise<DateTimeOutput>;
  emailConfirmationToken: () => Promise<String>;
  emailConfirmationTokenExpires: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  isVerified: () => Promise<AsyncIterator<Boolean>>;
  passwordResetToken: () => Promise<AsyncIterator<String>>;
  passwordResetTokenExpires: () => Promise<AsyncIterator<DateTimeOutput>>;
  emailConfirmationToken: () => Promise<AsyncIterator<String>>;
  emailConfirmationTokenExpires: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  isVerified: () => Promise<Boolean>;
  passwordResetToken: () => Promise<String>;
  passwordResetTokenExpires: () => Promise<DateTimeOutput>;
  emailConfirmationToken: () => Promise<String>;
  emailConfirmationTokenExpires: () => Promise<DateTimeOutput>;
}

export interface AggregateChannel {
  count: Int;
}

export interface AggregateChannelPromise
  extends Promise<AggregateChannel>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChannelSubscription
  extends Promise<AsyncIterator<AggregateChannel>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MetaDataPreviousValues {
  id: ID_Output;
  title?: String;
  image?: String;
  author?: String;
  description?: String;
}

export interface MetaDataPreviousValuesPromise
  extends Promise<MetaDataPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  image: () => Promise<String>;
  author: () => Promise<String>;
  description: () => Promise<String>;
}

export interface MetaDataPreviousValuesSubscription
  extends Promise<AsyncIterator<MetaDataPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChannelEdge {
  node: Channel;
  cursor: String;
}

export interface ChannelEdgePromise extends Promise<ChannelEdge>, Fragmentable {
  node: <T = ChannelPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChannelEdgeSubscription
  extends Promise<AsyncIterator<ChannelEdge>>,
    Fragmentable {
  node: <T = ChannelSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMetaData {
  count: Int;
}

export interface AggregateMetaDataPromise
  extends Promise<AggregateMetaData>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMetaDataSubscription
  extends Promise<AsyncIterator<AggregateMetaData>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface MetaDataConnection {
  pageInfo: PageInfo;
  edges: MetaDataEdge[];
}

export interface MetaDataConnectionPromise
  extends Promise<MetaDataConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MetaDataEdge>>() => T;
  aggregate: <T = AggregateMetaDataPromise>() => T;
}

export interface MetaDataConnectionSubscription
  extends Promise<AsyncIterator<MetaDataConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MetaDataEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMetaDataSubscription>() => T;
}

export interface Channel {
  id: ID_Output;
  name?: String;
  is_private: Boolean;
  deleted: Boolean;
}

export interface ChannelPromise extends Promise<Channel>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  owner: <T = UserPromise>() => T;
  is_private: () => Promise<Boolean>;
  deleted: () => Promise<Boolean>;
}

export interface ChannelSubscription
  extends Promise<AsyncIterator<Channel>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  members: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  owner: <T = UserSubscription>() => T;
  is_private: () => Promise<AsyncIterator<Boolean>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface ChannelNullablePromise
  extends Promise<Channel | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  owner: <T = UserPromise>() => T;
  is_private: () => Promise<Boolean>;
  deleted: () => Promise<Boolean>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChannelSubscriptionPayload {
  mutation: MutationType;
  node: Channel;
  updatedFields: String[];
  previousValues: ChannelPreviousValues;
}

export interface ChannelSubscriptionPayloadPromise
  extends Promise<ChannelSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChannelPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChannelPreviousValuesPromise>() => T;
}

export interface ChannelSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChannelSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChannelSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChannelPreviousValuesSubscription>() => T;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  edited?: Boolean;
  deleted?: Boolean;
  text: String;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  edited: () => Promise<Boolean>;
  deleted: () => Promise<Boolean>;
  text: () => Promise<String>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  edited: () => Promise<AsyncIterator<Boolean>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface ChannelConnection {
  pageInfo: PageInfo;
  edges: ChannelEdge[];
}

export interface ChannelConnectionPromise
  extends Promise<ChannelConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChannelEdge>>() => T;
  aggregate: <T = AggregateChannelPromise>() => T;
}

export interface ChannelConnectionSubscription
  extends Promise<AsyncIterator<ChannelConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChannelEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChannelSubscription>() => T;
}

export interface ChannelPreviousValues {
  id: ID_Output;
  name?: String;
  is_private: Boolean;
  deleted: Boolean;
}

export interface ChannelPreviousValuesPromise
  extends Promise<ChannelPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  is_private: () => Promise<Boolean>;
  deleted: () => Promise<Boolean>;
}

export interface ChannelPreviousValuesSubscription
  extends Promise<AsyncIterator<ChannelPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  is_private: () => Promise<AsyncIterator<Boolean>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface MetaDataEdge {
  node: MetaData;
  cursor: String;
}

export interface MetaDataEdgePromise
  extends Promise<MetaDataEdge>,
    Fragmentable {
  node: <T = MetaDataPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MetaDataEdgeSubscription
  extends Promise<AsyncIterator<MetaDataEdge>>,
    Fragmentable {
  node: <T = MetaDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "MetaData",
    embedded: false
  },
  {
    name: "Channel",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
