// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateChannel {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateMetaData {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Channel {
  id: ID!
  name: String
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  owner: User!
  is_private: Boolean!
  deleted: Boolean!
}

type ChannelConnection {
  pageInfo: PageInfo!
  edges: [ChannelEdge]!
  aggregate: AggregateChannel!
}

input ChannelCreateInput {
  id: ID
  name: String
  members: UserCreateManyInput
  owner: UserCreateOneInput!
  is_private: Boolean
  deleted: Boolean
}

input ChannelCreateOneInput {
  create: ChannelCreateInput
  connect: ChannelWhereUniqueInput
}

type ChannelEdge {
  node: Channel!
  cursor: String!
}

enum ChannelOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  is_private_ASC
  is_private_DESC
  deleted_ASC
  deleted_DESC
}

type ChannelPreviousValues {
  id: ID!
  name: String
  is_private: Boolean!
  deleted: Boolean!
}

type ChannelSubscriptionPayload {
  mutation: MutationType!
  node: Channel
  updatedFields: [String!]
  previousValues: ChannelPreviousValues
}

input ChannelSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChannelWhereInput
  AND: [ChannelSubscriptionWhereInput!]
  OR: [ChannelSubscriptionWhereInput!]
  NOT: [ChannelSubscriptionWhereInput!]
}

input ChannelUpdateDataInput {
  name: String
  members: UserUpdateManyInput
  owner: UserUpdateOneRequiredInput
  is_private: Boolean
  deleted: Boolean
}

input ChannelUpdateInput {
  name: String
  members: UserUpdateManyInput
  owner: UserUpdateOneRequiredInput
  is_private: Boolean
  deleted: Boolean
}

input ChannelUpdateManyMutationInput {
  name: String
  is_private: Boolean
  deleted: Boolean
}

input ChannelUpdateOneRequiredInput {
  create: ChannelCreateInput
  update: ChannelUpdateDataInput
  upsert: ChannelUpsertNestedInput
  connect: ChannelWhereUniqueInput
}

input ChannelUpsertNestedInput {
  update: ChannelUpdateDataInput!
  create: ChannelCreateInput!
}

input ChannelWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  owner: UserWhereInput
  is_private: Boolean
  is_private_not: Boolean
  deleted: Boolean
  deleted_not: Boolean
  AND: [ChannelWhereInput!]
  OR: [ChannelWhereInput!]
  NOT: [ChannelWhereInput!]
}

input ChannelWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Message {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  sender: User!
  receiver: Channel!
  edited: Boolean
  deleted: Boolean
  text: String!
  metaData: MetaData
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: ID
  sender: UserCreateOneInput!
  receiver: ChannelCreateOneInput!
  edited: Boolean
  deleted: Boolean
  text: String!
  metaData: MetaDataCreateOneInput
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  edited_ASC
  edited_DESC
  deleted_ASC
  deleted_DESC
  text_ASC
  text_DESC
}

type MessagePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  edited: Boolean
  deleted: Boolean
  text: String!
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

input MessageUpdateInput {
  sender: UserUpdateOneRequiredInput
  receiver: ChannelUpdateOneRequiredInput
  edited: Boolean
  deleted: Boolean
  text: String
  metaData: MetaDataUpdateOneInput
}

input MessageUpdateManyMutationInput {
  edited: Boolean
  deleted: Boolean
  text: String
}

input MessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  sender: UserWhereInput
  receiver: ChannelWhereInput
  edited: Boolean
  edited_not: Boolean
  deleted: Boolean
  deleted_not: Boolean
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  metaData: MetaDataWhereInput
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: ID
}

type MetaData {
  id: ID!
  title: String
  image: String
  author: String
  description: String
}

type MetaDataConnection {
  pageInfo: PageInfo!
  edges: [MetaDataEdge]!
  aggregate: AggregateMetaData!
}

input MetaDataCreateInput {
  id: ID
  title: String
  image: String
  author: String
  description: String
}

input MetaDataCreateOneInput {
  create: MetaDataCreateInput
  connect: MetaDataWhereUniqueInput
}

type MetaDataEdge {
  node: MetaData!
  cursor: String!
}

enum MetaDataOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  image_ASC
  image_DESC
  author_ASC
  author_DESC
  description_ASC
  description_DESC
}

type MetaDataPreviousValues {
  id: ID!
  title: String
  image: String
  author: String
  description: String
}

type MetaDataSubscriptionPayload {
  mutation: MutationType!
  node: MetaData
  updatedFields: [String!]
  previousValues: MetaDataPreviousValues
}

input MetaDataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MetaDataWhereInput
  AND: [MetaDataSubscriptionWhereInput!]
  OR: [MetaDataSubscriptionWhereInput!]
  NOT: [MetaDataSubscriptionWhereInput!]
}

input MetaDataUpdateDataInput {
  title: String
  image: String
  author: String
  description: String
}

input MetaDataUpdateInput {
  title: String
  image: String
  author: String
  description: String
}

input MetaDataUpdateManyMutationInput {
  title: String
  image: String
  author: String
  description: String
}

input MetaDataUpdateOneInput {
  create: MetaDataCreateInput
  update: MetaDataUpdateDataInput
  upsert: MetaDataUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: MetaDataWhereUniqueInput
}

input MetaDataUpsertNestedInput {
  update: MetaDataUpdateDataInput!
  create: MetaDataCreateInput!
}

input MetaDataWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [MetaDataWhereInput!]
  OR: [MetaDataWhereInput!]
  NOT: [MetaDataWhereInput!]
}

input MetaDataWhereUniqueInput {
  id: ID
}

type Mutation {
  createChannel(data: ChannelCreateInput!): Channel!
  updateChannel(data: ChannelUpdateInput!, where: ChannelWhereUniqueInput!): Channel
  updateManyChannels(data: ChannelUpdateManyMutationInput!, where: ChannelWhereInput): BatchPayload!
  upsertChannel(where: ChannelWhereUniqueInput!, create: ChannelCreateInput!, update: ChannelUpdateInput!): Channel!
  deleteChannel(where: ChannelWhereUniqueInput!): Channel
  deleteManyChannels(where: ChannelWhereInput): BatchPayload!
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createMetaData(data: MetaDataCreateInput!): MetaData!
  updateMetaData(data: MetaDataUpdateInput!, where: MetaDataWhereUniqueInput!): MetaData
  updateManyMetaDatas(data: MetaDataUpdateManyMutationInput!, where: MetaDataWhereInput): BatchPayload!
  upsertMetaData(where: MetaDataWhereUniqueInput!, create: MetaDataCreateInput!, update: MetaDataUpdateInput!): MetaData!
  deleteMetaData(where: MetaDataWhereUniqueInput!): MetaData
  deleteManyMetaDatas(where: MetaDataWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  channel(where: ChannelWhereUniqueInput!): Channel
  channels(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Channel]!
  channelsConnection(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChannelConnection!
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  metaData(where: MetaDataWhereUniqueInput!): MetaData
  metaDatas(where: MetaDataWhereInput, orderBy: MetaDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MetaData]!
  metaDatasConnection(where: MetaDataWhereInput, orderBy: MetaDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MetaDataConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  channel(where: ChannelSubscriptionWhereInput): ChannelSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  metaData(where: MetaDataSubscriptionWhereInput): MetaDataSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  password: String!
  name: String!
  isVerified: Boolean
  passwordResetToken: String
  passwordResetTokenExpires: DateTime
  emailConfirmationToken: String
  emailConfirmationTokenExpires: DateTime
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
  name: String!
  isVerified: Boolean
  passwordResetToken: String
  passwordResetTokenExpires: DateTime
  emailConfirmationToken: String
  emailConfirmationTokenExpires: DateTime
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  isVerified_ASC
  isVerified_DESC
  passwordResetToken_ASC
  passwordResetToken_DESC
  passwordResetTokenExpires_ASC
  passwordResetTokenExpires_DESC
  emailConfirmationToken_ASC
  emailConfirmationToken_DESC
  emailConfirmationTokenExpires_ASC
  emailConfirmationTokenExpires_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
  isVerified: Boolean
  passwordResetToken: String
  passwordResetTokenExpires: DateTime
  emailConfirmationToken: String
  emailConfirmationTokenExpires: DateTime
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isVerified: Boolean
  isVerified_not: Boolean
  passwordResetToken: String
  passwordResetToken_not: String
  passwordResetToken_in: [String!]
  passwordResetToken_not_in: [String!]
  passwordResetToken_lt: String
  passwordResetToken_lte: String
  passwordResetToken_gt: String
  passwordResetToken_gte: String
  passwordResetToken_contains: String
  passwordResetToken_not_contains: String
  passwordResetToken_starts_with: String
  passwordResetToken_not_starts_with: String
  passwordResetToken_ends_with: String
  passwordResetToken_not_ends_with: String
  passwordResetTokenExpires: DateTime
  passwordResetTokenExpires_not: DateTime
  passwordResetTokenExpires_in: [DateTime!]
  passwordResetTokenExpires_not_in: [DateTime!]
  passwordResetTokenExpires_lt: DateTime
  passwordResetTokenExpires_lte: DateTime
  passwordResetTokenExpires_gt: DateTime
  passwordResetTokenExpires_gte: DateTime
  emailConfirmationToken: String
  emailConfirmationToken_not: String
  emailConfirmationToken_in: [String!]
  emailConfirmationToken_not_in: [String!]
  emailConfirmationToken_lt: String
  emailConfirmationToken_lte: String
  emailConfirmationToken_gt: String
  emailConfirmationToken_gte: String
  emailConfirmationToken_contains: String
  emailConfirmationToken_not_contains: String
  emailConfirmationToken_starts_with: String
  emailConfirmationToken_not_starts_with: String
  emailConfirmationToken_ends_with: String
  emailConfirmationToken_not_ends_with: String
  emailConfirmationTokenExpires: DateTime
  emailConfirmationTokenExpires_not: DateTime
  emailConfirmationTokenExpires_in: [DateTime!]
  emailConfirmationTokenExpires_not_in: [DateTime!]
  emailConfirmationTokenExpires_lt: DateTime
  emailConfirmationTokenExpires_lte: DateTime
  emailConfirmationTokenExpires_gt: DateTime
  emailConfirmationTokenExpires_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  email: String
  password: String
  name: String
  isVerified: Boolean
  passwordResetToken: String
  passwordResetTokenExpires: DateTime
  emailConfirmationToken: String
  emailConfirmationTokenExpires: DateTime
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  isVerified: Boolean
  passwordResetToken: String
  passwordResetTokenExpires: DateTime
  emailConfirmationToken: String
  emailConfirmationTokenExpires: DateTime
}

input UserUpdateManyDataInput {
  email: String
  password: String
  name: String
  isVerified: Boolean
  passwordResetToken: String
  passwordResetTokenExpires: DateTime
  emailConfirmationToken: String
  emailConfirmationTokenExpires: DateTime
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  name: String
  isVerified: Boolean
  passwordResetToken: String
  passwordResetTokenExpires: DateTime
  emailConfirmationToken: String
  emailConfirmationTokenExpires: DateTime
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isVerified: Boolean
  isVerified_not: Boolean
  passwordResetToken: String
  passwordResetToken_not: String
  passwordResetToken_in: [String!]
  passwordResetToken_not_in: [String!]
  passwordResetToken_lt: String
  passwordResetToken_lte: String
  passwordResetToken_gt: String
  passwordResetToken_gte: String
  passwordResetToken_contains: String
  passwordResetToken_not_contains: String
  passwordResetToken_starts_with: String
  passwordResetToken_not_starts_with: String
  passwordResetToken_ends_with: String
  passwordResetToken_not_ends_with: String
  passwordResetTokenExpires: DateTime
  passwordResetTokenExpires_not: DateTime
  passwordResetTokenExpires_in: [DateTime!]
  passwordResetTokenExpires_not_in: [DateTime!]
  passwordResetTokenExpires_lt: DateTime
  passwordResetTokenExpires_lte: DateTime
  passwordResetTokenExpires_gt: DateTime
  passwordResetTokenExpires_gte: DateTime
  emailConfirmationToken: String
  emailConfirmationToken_not: String
  emailConfirmationToken_in: [String!]
  emailConfirmationToken_not_in: [String!]
  emailConfirmationToken_lt: String
  emailConfirmationToken_lte: String
  emailConfirmationToken_gt: String
  emailConfirmationToken_gte: String
  emailConfirmationToken_contains: String
  emailConfirmationToken_not_contains: String
  emailConfirmationToken_starts_with: String
  emailConfirmationToken_not_starts_with: String
  emailConfirmationToken_ends_with: String
  emailConfirmationToken_not_ends_with: String
  emailConfirmationTokenExpires: DateTime
  emailConfirmationTokenExpires_not: DateTime
  emailConfirmationTokenExpires_in: [DateTime!]
  emailConfirmationTokenExpires_not_in: [DateTime!]
  emailConfirmationTokenExpires_lt: DateTime
  emailConfirmationTokenExpires_lte: DateTime
  emailConfirmationTokenExpires_gt: DateTime
  emailConfirmationTokenExpires_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  passwordResetToken: String
  emailConfirmationToken: String
}
`